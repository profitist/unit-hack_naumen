from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton,
                                InlineKeyboardMarkup, InlineKeyboardButton)
import database.requests.requests as rq

from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

admin = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ")],
        [KeyboardButton(text="–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è üóì")]
    ],
    resize_keyboard=True
)

main_reply = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è ‚úî"), KeyboardButton(text="–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è üóì")],
        [KeyboardButton(text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="–û –Ω–∞—Å ‚ÑπÔ∏è"), KeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")],
        [KeyboardButton(text='FAQ üßê')]
    ],
    resize_keyboard=True
)

profile_reply = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"), KeyboardButton(text="–ú–æ–∏ –æ—á–µ—Ä–µ–¥–∏")],
        [KeyboardButton(text="–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ"), KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")]
    ],
    resize_keyboard=True
)


reg_back_inline = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_in_reg")]
    ]
)


reply_test = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ê–∫—É—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è üóì")],
        [KeyboardButton(text="–ü–æ–º–æ—â—å ü´Ç"), KeyboardButton(text="–û –Ω–∞—Å ‚ÑπÔ∏è"), KeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")]
    ],
    resize_keyboard=True
)


async def inline_event_description(user_id: int, event_id: int):
    events = await rq.show_all_events_of_user(user_id)
    keyboard = InlineKeyboardBuilder()
    for event in events:
        if event.id == event_id:
            keyboard.add(InlineKeyboardButton(text='–ú–∞—Å—Ç–µ—Ä–∫–ª–∞—Å—Å—ã', callback_data=f'master_classes_of_{event_id}'))
            return keyboard.adjust(1).as_markup()

    keyboard.add(InlineKeyboardButton(text='–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data=f'reg_on_event_{event_id}'))
    keyboard.add(InlineKeyboardButton(text='–ú–∞—Å—Ç–µ—Ä–∫–ª–∞—Å—Å—ã', callback_data=f'master_classes_of_{event_id}'))
    return keyboard.adjust(1).as_markup()


async def inline_masterclass_description(user_id: int, masterclass_id: int):
    masterclasses = await rq.show_all_master_classes_of_user(user_id)
    keyboard = InlineKeyboardBuilder()
    for masterclass in masterclasses:
        if masterclass_id == masterclass.id:
            return keyboard.as_markup()
    keyboard.add(InlineKeyboardButton(text='–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data=f'reg_on_masterclass_{masterclass_id}'))
    return keyboard.adjust(1).as_markup()


settings = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–•–£–ô–ß–ò–ö', url='https://unit-ekb.ru/')]])

manus = ['Platonn228', 'IVANUS', 'STEPA', 'ZALUPA']


async def inline_manus():
    keyboard = InlineKeyboardBuilder()
    for man in manus:
        keyboard.add(InlineKeyboardButton(text=man, url='https://github.com/Platonn3'))
    return keyboard.adjust(1).as_markup()

