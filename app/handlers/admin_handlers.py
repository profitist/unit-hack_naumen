from datetime import datetime, timedelta

from aiogram.types import Message, InlineKeyboardMarkup, CallbackQuery
from aiogram import Bot, F, Router
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from io import BytesIO
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import app.validators as val
from database.models.models import MasterClass
from database.session import AsyncSessionLocal
from utils.admin_utils import admin_required
from source.working_classes import Event, Activity
import asyncio
from database.requests.requests import add_event_if_not_exists
import app.keyboards.admin_keyboards as ak
import database.requests.requests as rq
import utils.text_utils as tu
import aiofiles
import uuid
import os

admin_router = Router()
scheduler = AsyncIOScheduler()


class AddEvent(StatesGroup):
    title = State()
    description = State()
    date = State()
    vacant_places = State()
    address = State()
    photo = State()
    send = State()

class AddMasterClass(StatesGroup):
    event_id = State()
    title = State()
    description = State()
    date = State()
    vacant_places = State()
    photo = State()


class Broadcast(StatesGroup):
    message = State()


@admin_router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ')
@admin_required
async def add_event_1(message: Message, state: FSMContext):
    await state.set_state(AddEvent.title)
    await message.answer(text='–ü–æ—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ!'
                              ' –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ–±—ã—Ç–∏—è:')


@admin_router.message(AddEvent.title)
@admin_required
async def add_event_2(message: Message, state: FSMContext):
    answer = message.text
    if val.is_valid_event_name(answer):
        await state.update_data(title=answer)
        await state.set_state(AddEvent.description)
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è!')
    else:
        await message.answer(text='–í–≤–µ–¥–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –≤–∞–ª–∏–¥–µ–Ω')


@admin_router.message(AddEvent.description)
@admin_required
async def add_event_3(message: Message, state: FSMContext):
    answer = message.text
    if len(answer) >= 10:
        await state.update_data(description=answer)
        await state.set_state(AddEvent.date)
        await message.answer(text='–û—Ç–ª–∏—á–Ω–æ, –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n'
                                  '–î–∞–≤–∞–π—Ç–µ –Ω–∞–∑–Ω–∞—á–∏–º –¥–∞—Ç—É: –í–≤–µ–¥–∏—Ç–µ –µ–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '
                                  '{–¥–¥.–º–º.–≥–≥–≥–≥}')
    else:
        await message.answer(text='–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ, '
                                  '–¥–∞–≤–∞–π –¥–∞–¥–∏–º –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')


@admin_router.message(AddEvent.date)
@admin_required
async def add_event_4(message: Message, state: FSMContext):
    answer = message.text
    if val.is_valid_event_date(answer):
        date = datetime.strptime(answer, '%d.%m.%Y %H:%M:%S')
        await state.update_data(date=date)
        await state.set_state(AddEvent.vacant_places)
        await message.answer(text=f'–£—Ä–∞! {await state.get_value("title")} '
                                  f'–±—É–¥–µ—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω {await state.get_value("date")}\n\n'
                                  f'–î–∞–≤–∞–π —É–∫–∞–∂–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
    else:
        await message.answer('–í–≤–µ–¥–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!\n'
                             '–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑\n\n'
                             '–í–æ—Ç —Ñ–æ—Ä–º–∞—Ç: {–¥–¥.–º–º.–≥–≥ —á—á:–º–∏–Ω}')


@admin_router.message(AddEvent.vacant_places)
@admin_required
async def add_event_5(message: Message, state: FSMContext):
    answer = message.text
    try:
        counter = int(answer)
        if counter <= 0:
            raise ValueError
        await state.update_data(vacant_places=counter)
        await state.set_state(AddEvent.address)
        await message.answer(text='–î–∞–≤–∞–π —É–∫–∞–∂–µ–º –∞–¥—Ä–µc, '
                                  '–ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –ò–≤–µ–Ω—Ç')
    except ValueError:
        await message.answer(text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!\n '
                                  '–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –≤–≤–æ–¥–∏—à—å —á–∏—Å–ª–æ!')


@admin_router.message(AddEvent.address)
@admin_required
async def add_event_end(message: Message, state: FSMContext):
    address = message.text
    await state.update_data(address=address)
    data = await state.get_data()
    if val.is_valid_location(address):
        event = Event(_title=data['title'], _description=data['description'],
                      _start_time=data['date'],
                      _vacant_places=data['vacant_places'],
                      _location=data['address'])
        await add_event_if_not_exists(event)
        await message.answer("–°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –í—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤—à–∏—Ö—Å—è —É–≤–µ–¥–æ–º—è—Ç –∑–∞ —á–∞—Å!",
                             reply_markup=ak.send_everyone_event_creation)
        broadcast_time = event._start_time - timedelta(hours=1)
        scheduler.add_job(
            send_event_broadcast,
            'date',
            run_date=broadcast_time,
            args=[event, message.bot]
        )
        await state.set_state(AddEvent.send)
    else:
        await message.answer(text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å, –ø–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑')

async def send_event_broadcast(event: Event, bot: Bot):
    message_text = (
        f"–£–∂–µ —á–µ—Ä–µ–∑ —á–∞—Å!  *{event._title}*!\n"
        f"üìç –ì–¥–µ: {event._location}\n"
        f"‚Ñπ {event._description}\n"
        "–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ!"
    )
    users = await rq.get_registered_users_for_event()
    for user_id in users:
        try:
            await bot.send_message(
                chat_id=user_id,
                text=message_text,
                parse_mode="Markdown"
            )
            await asyncio.sleep(0.05)
        except Exception as e:
            print(f"{e} for user {user_id}")


@admin_router.message(
    F.text == '–£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º —Å–æ–±—ã—Ç–∏–∏',
    AddEvent.send  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
)
@admin_required
async def send_everybody_event_info(message: Message, state: FSMContext):
    data = await state.get_data()
    text = tu.send_notification_of_creating_event(data)
    await send_message_to_everybody(message.bot, text)
    await state.clear()


@admin_router.message(F.text == "–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
@admin_required
async def start_broadcast(message: Message, state: FSMContext):
    await state.set_state(Broadcast.message)
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:')


@admin_router.message(Broadcast.message)
@admin_required
async def send_broadcast(message: Message, state: FSMContext):
    broadcast_message = message.text
    if len(broadcast_message) > 0:
        await send_message_to_everybody(message, message.bot, broadcast_message)
        await state.clear()
    else:
        await message.answer(text='–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')


async def send_message_to_everybody(
        message: Message, bot: Bot, broadcast_message: str):
    users = await rq.get_all_tg_ids()
    success_count = 0
    fail_count = 0
    await message.answer(text='–†–∞—Å—Å—ã–ª–∫–∞ –æ —Å–æ–±—ã—Ç–∏–∏ –Ω–∞—á–∞–ª–∞—Å—å...',
                         reply_markup=ReplyKeyboardRemove())
    for user_id in users:
        try:
            print(user_id)
            await bot.send_message(chat_id=user_id, text=broadcast_message)
            success_count += 1
            await asyncio.sleep(0.05)
        except Exception as e:
            fail_count += 1

    await message.answer(text='–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', reply_markup=ak.admin_menu)


@admin_router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä –∫–ª–∞—Å—Å')
@admin_required
async def start_add_master_class(message: Message, state: FSMContext):
    events = await rq.show_all_events()
    if not events:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞",
                             reply_markup=ak.admin_menu)
        return

    await state.set_state(AddMasterClass.event_id)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:",
                         reply_markup=await ak.inline_events_names(events))


@admin_router.callback_query(F.data.startswith('chose_event_'), AddMasterClass.event_id)
@admin_required
async def select_event_for_master_class(callback: CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split('_')[-1])
    await state.update_data(event_id=event_id)
    await state.set_state(AddMasterClass.title)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞:")
    await callback.answer()


@admin_router.message(AddMasterClass.title)
@admin_required
async def add_master_class_title(message: Message, state: FSMContext):
    if val.is_valid_event_name(message.text):
        await state.update_data(title=message.text)
        await state.set_state(AddMasterClass.description)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞:")
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@admin_router.message(AddMasterClass.description)
@admin_required
async def add_master_class_description(message: Message, state: FSMContext):
    if len(message.text) >= 10:
        await state.update_data(description=message.text)
        await state.set_state(AddMasterClass.date)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞ (—Ñ–æ—Ä–º–∞—Ç: –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º):")
    else:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.")


@admin_router.message(AddMasterClass.date)
@admin_required
async def add_master_class_date(message: Message, state: FSMContext):
    if val.is_valid_event_date(message.text):
        try:
            date = datetime.strptime(message.text, '%d.%m.%Y %H:%M:%S')
            await state.update_data(date=date)
            await state.set_state(AddMasterClass.vacant_places)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç:")
        except ValueError:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º")
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º")


@admin_router.message(AddMasterClass.vacant_places)
@admin_required
async def add_master_class_places(message: Message, state: FSMContext):
    try:
        places = int(message.text)
        if places <= 0:
            raise ValueError
        await state.update_data(vacant_places=places)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()

        # –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å
        master_class = MasterClass(
            event_id=data['event_id'],
            title=data['title'],
            description=data['description'],
            datetime=data['date'],
            vacant_places=data['vacant_places'],
        )

        async with AsyncSessionLocal() as session:
            session.add(master_class)
            await session.commit()

        await message.answer("–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                             reply_markup=ak.admin_menu)
        await state.clear()

    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–µ—Å—Ç (–±–æ–ª—å—à–µ 0)")

class FaqAdd(StatesGroup):
    message = State()
    apply = State()


@admin_router.message(F.text == '–°–æ–∑–¥–∞—Ç—å FAQ')
@admin_required
async def add_faq_question(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ üòä')
    await state.set_state(FaqAdd.message)


@admin_router.message(FaqAdd.message)
@admin_required
async def add_faq_answer(message: Message, state: FSMContext):
    await state.update_data(faq_question=message.text)
    await state.set_state(FaqAdd.apply)
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: üòä')


@admin_router.message(FaqAdd.apply)
@admin_required
async def add_faq_answer(message: Message, state: FSMContext):
    await state.update_data(faq_answer=message.text)
    data = await state.get_data()
    await state.set_state(FaqAdd.message)
    await message.answer(text=f'FAQ –¥–æ–±–∞–≤–ª–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:\n'
                              f'–í–æ–ø—Ä–æ—Å: {data["faq_question"]}\n\n'
                              f'–û—Ç–≤–µ—Ç: {data["faq_answer"]}\n\n'
                              f'–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å?',
                         reply_markup=ak.accept_add_faq)


@admin_router.callback_query(F.data == 'accept_add_faq')
@admin_required
async def accept_add_faq_callback_query(
        callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await rq.add_faq(data['faq_question'], data['faq_answer'])
    await callback.message.answer('–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ',
                                  reply_markup=ak.admin_menu)
    await state.clear()


@admin_router.callback_query(F.data == 'deny_add_faq')
@admin_required
async def deny_add_faq_callback_query(
        callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–°–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå',
                                  reply_markup=ak.admin_menu)
    await state.clear()
