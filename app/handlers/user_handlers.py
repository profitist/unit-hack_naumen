from aiogram.dispatcher import router
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import (Message,
                           CallbackQuery,
                           BotCommand,
                           ReplyKeyboardRemove)
from aiogram import F, Router
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import app.validators as val
import database.requests.requests as rq
import app.keyboards.keyboards as kb
import app.keyboards.admin_keyboards as ak
import utils.text_utils as tu
from source.user import UserClass
from database.requests.requests import add_user_if_not_exists

ADMIN_CHAT_ID = -1002649837821
# ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
# ADMIN_CHAT_ID = dotenv_values('env').get('ADMIN_CHAT_ID')


user_router = Router()


class Reg(StatesGroup):
    first_name = State()
    second_name = State()
    number = State()


class Ask(StatesGroup):
    waiting_for_question = State()


async def set_commands(bot):
    commands = [
        BotCommand(command="/start_chat", description="–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"),
        BotCommand(command="/help", description="–ü–æ–º–æ—â—å"),
        BotCommand(command="/reg", description="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
    ]
    await bot.set_my_commands(commands)



@user_router.message(CommandStart(deep_link=True))
async def cmd_start(message: Message, command: CommandObject):
    if command.args is None:
        is_admin = await rq.is_admin(message.from_user.id)
        if is_admin:
            await message.answer(tu.send_start_admin_user_message(message),
                                 reply_markup=kb.admin)
        else:
            await message.answer(tu.send_start_common_user_message(message),
                                 reply_markup=kb.main_reply)
    if command.args == 'test':
        await message.answer("–í–æ—Ç —Ç–µ–±–µ –ø–æ–º–æ—â—å!")


@user_router.message(Command("start_chat"))
async def get_start(message: Message):
    is_admin = await rq.is_admin(message.from_user.id)
    if is_admin:
        await message.answer(tu.send_start_admin_user_message(message),
                             reply_markup=ak.admin_menu)
    else:
        await message.answer(tu.send_start_common_user_message(message),
                             reply_markup=kb.main_reply)


@user_router.message(Command("help"))
async def get_help(message: Message):
    await message.answer("help")

@user_router.message(F.text == "–û –Ω–∞—Å ‚ÑπÔ∏è")
async def get_info(message: Message):
    await message.answer(
        '–Ø –ë–æ—Ç - –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∫–æ–º–ø–∞–Ω–∏–∏ Naumen üòä\n\n'
        '–ü–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö'
        '–Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏, –∞ —Ç–∞–∫–∂–µ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –Ω–∏—Ö.'
    )


# –ó–∞–ø—Ä–æ—Å –≤–æ–ø—Ä–æ—Å–∞
@user_router.message(F.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_question(message: Message, state: FSMContext):
    await state.set_state(Ask.waiting_for_question)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:", reply_markup=ReplyKeyboardRemove())


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω—É
@user_router.message(Ask.waiting_for_question)
async def got_question(message: Message, state: FSMContext, bot):
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ username"
    text = message.text

    # –û—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Å user_id
    await bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=f"üì© –í–æ–ø—Ä–æ—Å –æ—Ç @{username} (ID: {user_id}):\n{text}"
    )

    await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ú—ã —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º!", reply_markup=kb.main_reply)
    await state.clear()


@user_router.message(F.chat.id == ADMIN_CHAT_ID)
async def reply_to_user(message: Message, bot):
    if message.reply_to_message:
        # –ò—â–µ–º user_id –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        lines = message.reply_to_message.text.splitlines()
        for line in lines:
            if "ID:" in line:
                try:
                    user_id = int(line.split("ID:")[1].strip().replace(")", "").replace(":", ""))
                    await bot.send_message(chat_id=user_id, text=f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{message.text}")
                    await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
                except Exception as e:
                    await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                break
        else:
            await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
    else:
        await message.answer("‚ÑπÔ∏è –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å *–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º*.", parse_mode="Markdown")



# @router.callback_query(F.data == 'registration')
# async def registration(callback:CallbackQuery):
#     # TO DO
#     # —Ç—É—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Ç–≤–∏–µ —Å –±–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
#     await callback.answer('')
#     await callback.message.edit_text('–¢—ã –∑–∞—Ä–µ–≥–∞–Ω!–∏–¥–∏ –≥—É–ª–π—è –≥–∞ –º–µ—Ä–æ', reply_markup=await kb.inline_manus())


@user_router.callback_query(F.data == "back_in_reg")
async def go_back(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()

    if current_state == Reg.second_name:
        await state.set_state(Reg.first_name)
        await callback.answer('')
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤):", reply_markup=kb.reg_back_inline)

    elif current_state == Reg.number:
        await state.set_state(Reg.second_name)
        await callback.answer('')
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤):", reply_markup=kb.reg_back_inline)

    else:
        await callback.answer('')
        await callback.message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", reply_markup=kb.main_reply)
        await state.clear()


@user_router.message(F.text == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è ‚úî")
async def start_registration(message: Message, state: FSMContext):
    await state.set_state(Reg.first_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤)",
                         reply_markup=kb.reg_back_inline)


@user_router.message(F.text == "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def start_registration(message: Message):
    await message.answer("–≠—Ç–æ —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å."
                         "\n–¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å, –Ω–∞ –∫–∞–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Ç—ã –∑–∞–ø–∏—Å–∞–ª—Å—è, –∫–∞–∫–æ–π —Ç—ã –≤ –æ—á–µ—Ä–µ–¥–∏, –ø–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
                         "\n–¢–∞–∫ –∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ,",
                         reply_markup=kb.profile_reply)
    # TO DO
    # –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –≤ –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞—Ä–µ–≥–∞–Ω
    # –°–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–µ–π –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è
    # –î–∞–Ω–Ω—ã–µ


@user_router.message(Command('reg'))
async def reg_one(message: Message, state: FSMContext):
    await state.set_state(Reg.first_name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤)',
                         reply_markup=kb.reg_back_inline)


@user_router.message(Reg.first_name)
async def reg_two(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return await go_back(message, state)
    if not val.is_valid_first_name(message.text):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã (2-30 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                             , reply_markup=kb.reg_back_inline)
        return

    await state.update_data(first_name=message.text)
    await state.set_state(Reg.second_name)
    await message.answer('‚úÖ –ü—Ä–∏–Ω—è—Ç–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤)'
                         , reply_markup=kb.reg_back_inline)


@user_router.message(Reg.second_name)
async def reg_three(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return await go_back(message, state)

    if not val.is_valid_second_name(message.text):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã (2-30 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                             , reply_markup=kb.reg_back_inline)
        return

    await state.update_data(second_name=message.text)
    await state.set_state(Reg.number)
    await message.answer('‚úÖ –ü—Ä–∏–Ω—è—Ç–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567 –∏–ª–∏ 89991234567'
                         , reply_markup=kb.reg_back_inline)


@user_router.message(Reg.number)
async def reg_four(message: Message, state: FSMContext):
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return await go_back(message, state)

    if not val.is_valid_phone_number(message.text):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä! –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567 –∏–ª–∏ 89991234567. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
         ,reply_markup=kb.reg_back_inline)
        return

    await state.update_data(number=message.text)
    data = await state.get_data()
    user = UserClass(
        tg_id=message.from_user.id,
        username=message.from_user.username,
        first_name=data["first_name"],
        last_name=data["second_name"],
        phone=data["number"],
        is_admin=False
    )
    await add_user_if_not_exists(user)

    await message.answer(
        f'‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n'
        f'–ò–º—è: {data["first_name"]}\n'
        f'–§–∞–º–∏–ª–∏—è: {data["second_name"]}\n'
        f'–ù–æ–º–µ—Ä: {data["number"]}',
        reply_markup=kb.reply_test
    )
    await state.clear()


@user_router.message(F.text == "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è üóì")
async def get_all_events(message: Message):
    events = await rq.show_all_events()
    for event in events:
        await message.answer(
            f'{event.description}\n'
            f'{event.datetime}'
            " <a href='https://t.me/naume_pivo_n_bot?start=test'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>",
            parse_mode="HTML"
        )


@user_router.message(F.text.startswith('FAQ'))
async def faq(message: Message):
    faqs = await rq.get_faq()
    if not faqs:
        await message.answer('–ú—ã –Ω–∏–∫–æ–º—ã –Ω–µ –Ω—É–∂–Ω—ã',
                             reply_markup=kb.main_reply)
        return
    text_message = ''
    print(faqs[0].question)
    print(faqs[1].question)
    for faq in faqs:
        text_message += faq.question + '\n\n'
        text_message += faq.answer
    await message.answer(text_message, reply_markup=kb.main_reply)
