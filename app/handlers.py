import os

from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, BotCommand, ReplyKeyboardRemove
from aiogram import F, Router
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from dotenv import dotenv_values
import app.keyboards as kb

ADMIN_CHAT_ID = -1002649837821
# ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
# ADMIN_CHAT_ID = dotenv_values('env').get('ADMIN_CHAT_ID')


router = Router()


class Reg(StatesGroup):
    name = State()
    number = State()

class Ask(StatesGroup):
    waiting_for_question = State()

async def set_commands(bot):
    commands = [
        BotCommand(command="/start", description="–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"),
        BotCommand(command="/help", description="–ü–æ–º–æ—â—å"),
        BotCommand(command="/reg", description="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
    ]
    await bot.set_my_commands(commands)


@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}",
                         reply_markup=kb.main_reply)

@router.message(Command("help"))
async def get_help(message: Message):
    await message.answer("help")


# –ó–∞–ø—Ä–æ—Å –≤–æ–ø—Ä–æ—Å–∞
@router.message(F.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_question(message: Message, state: FSMContext):
    await state.set_state(Ask.waiting_for_question)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:", reply_markup=ReplyKeyboardRemove())


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω—É
@router.message(Ask.waiting_for_question)
async def got_question(message: Message, state: FSMContext, bot):
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ username"
    text = message.text

    # –û—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Å user_id
    await bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=f"üì© –í–æ–ø—Ä–æ—Å –æ—Ç @{username} (ID: {user_id}):\n{text}"
    )

    await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ú—ã —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º!", reply_markup=kb.main_reply)
    await state.clear()


@router.message(F.chat.id == ADMIN_CHAT_ID)
async def reply_to_user(message: Message, bot):
    if message.reply_to_message:
        # –ò—â–µ–º user_id –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        lines = message.reply_to_message.text.splitlines()
        for line in lines:
            if "ID:" in line:
                try:
                    user_id = int(line.split("ID:")[1].strip().replace(")", "").replace(":", ""))
                    await bot.send_message(chat_id=user_id, text=f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{message.text}")
                    await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
                except Exception as e:
                    await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                break
        else:
            await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
    else:
        await message.answer("‚ÑπÔ∏è –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å *–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º*.", parse_mode="Markdown")



# @router.callback_query(F.data == 'registration')
# async def registration(callback:CallbackQuery):
#     # TO DO
#     # —Ç—É—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Ç–≤–∏–µ —Å –±–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
#     await callback.answer('')
#     await callback.message.edit_text('–¢—ã –∑–∞—Ä–µ–≥–∞–Ω!–∏–¥–∏ –≥—É–ª–π—è –≥–∞ –º–µ—Ä–æ', reply_markup=await kb.inline_manus())


@router.message(F.text == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
async def start_registration(message: Message, state: FSMContext):
    await state.set_state(Reg.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è", reply_markup=ReplyKeyboardRemove())


@router.message(Command('reg'))
async def reg_one(message: Message, state: FSMContext):
    await state.set_state(Reg.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è', reply_markup=ReplyKeyboardRemove())

@router.message(Reg.name)
async def reg_two(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Reg.number)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +71234567890')


@router.message(Reg.number)
async def two_three(message: Message, state: FSMContext):
    await state.update_data(number=message.text)
    data = await state.get_data()
    await message.answer(f'–°–ø–∞—Å–∏–±–æ, —Ä–æ–¥–Ω–æ–π.\n–ò–º—è: {data["name"]}\n–ù–æ–º–µ—Ä: {data["number"]}', reply_markup=kb.reply_test)
    await state.clear()